(this["webpackJsonpton-fift-codes"]=this["webpackJsonpton-fift-codes"]||[]).push([[0],{26:function(e){e.exports=JSON.parse('[{"asm":"CTOS","code":null,"alias":null,"stack":null,"desc":"Cell to Slice"},{"asm":"DUP","code":null,"alias":"PUSH s0","stack":null,"desc":null},{"asm":"NIP","code":"0x31","alias":"POP s1","stack":null,"desc":null},{"asm":"INC","code":null,"alias":"ADDCONST 1","stack":null,"desc":null},{"asm":"INT","code":null,"alias":null,"stack":"(b x - b\')","desc":null},{"asm":"LDSLICEX","code":null,"alias":null,"stack":"(s l - s\u2032\u2032s\u2032)","desc":"loads the first 0 \u2264 l \u2264 1023 bits from Slices into a separate Slice s\u2032\u2032, returning the remainder of s a s`"},{"asm":"STU cc+1","code":"0xCB cc","alias":null,"stack":"(x b - b\u2032)","desc":"stores an unsigned cc+1-bit integer x into Builder b`"},{"asm":"LDU cc+1","code":"0xD3 cc","alias":null,"stack":"(s - x s\u2032)","desc":"loads an unsigned cc+1-bit integer x from Slices"},{"asm":"PLDU cc+1","code":"0xD70B cc","alias":null,"stack":"(s - x)","desc":"preloads an unsigned cc+1-bit integer froms"},{"asm":"SETCODE","code":"0xFB04","alias":null,"stack":"(c - )","desc":"creates an output action that would change this smart contract code to that given by Cell c"},{"asm":"boc+>B","code":null,"alias":null,"stack":"(c x - B)","desc":"creates and serializes a \u201cstandard\u201d bag of cells, containing one root Cell c along with all its descendants.  An Integer parameter 0\u2264x\u226431 is used to pass flags indicating the additional options for bag-of-cells serialization"},{"asm":"boc>B","code":null,"alias":"0 boc+>B","stack":"(c - B)","desc":"serializes a small \u201cstandard\u201d bag of cells with root Cell c and all its descendants"},{"asm":"LDSLICE cc+1","code":"0xD6 cc","alias":null,"stack":"(s - s\u2032\u2032s\u2032)","desc":"cuts the next cc+1 bits of s into a separate Slice s\u2032\u2032"},{"asm":"LDUX","code":"0xD701","alias":null,"stack":"(s l - x s\u2032)","desc":"loads an unsigned l-bit integer x from (the first l bits of) s, with 0\u2264l\u2264256"},{"asm":"u,","code":null,"alias":null,"stack":"(b x y - b\u2032)","desc":"appends the big-endian binary representation of an unsigned y-bit integer x to Builder b, where 0\u2264y\u2264256.  If the operation is impossible, an exception is thrown"},{"asm":"ed25519_sign","code":null,"alias":null,"stack":"(B B\u2032 - B\u2032\u2032)","desc":"signs data B with the Ed25519 private key B\u2032(a 32-byte Bytes value) and returns the signature as a 64-byte Bytes value B\u2032\u2032"},{"asm":"ed25519_sign_uint","code":null,"alias":"swap 256 u>B swap ed25519_sign","stack":"(x B\u2032 - B\u2032\u2032)","desc":"converts a big-endian unsigned 256-bit integer x into a 32-byte sequence and signs it using the Ed25519 private key B\u2032 similarly to ed25519_sign"},{"asm":"EQUAL","code":"0xBA","alias":null,"stack":"(x y - x=y)","desc":"returns -1 if x=y, 0 otherwise"},{"asm":"runvmcode","code":null,"alias":null,"stack":"(...s - ...x)","desc":"invokes a new instance of TVM with the current continuation cc initialized from Slice s. The original Fift stack (without s) is passed in its entirety asthe initial stack of TVM"},{"asm":"runvmdict","code":null,"alias":null,"stack":"(...s - ...x)","desc":"invokes a new instance of TVM with the current continuation cc initialized from Slice s similarly to runvmcode, but also initializes the special registerc3 with the same value, and pushes a zero into the initial TVM stack before the TVM execution begins"},{"asm":"runvm","code":null,"alias":null,"stack":"(...s c - ...x c\u2032)","desc":"invokes a new instance of TVM with both the current continuation cc and the special register c3 initialized from Slice s, and pushes a zero into the initial TVM stack similarly to runvmdict, but also initializes special register c4(the \u201croot of persistent data\u201d) with Cell c"},{"asm":"RET","code":"0xDB30","alias":"PUSH c0; JMPX","stack":"(...s c - ...x c\u2032)","desc":"return s to the continuation at c0 (i.e., performs cc\u2190c0).  The remainder of the current continuation cc is discarded"},{"asm":"NEWDICT","code":"0x6D","alias":"PUSHNULL","stack":"( - D)","desc":"returns a new empty dictionary"},{"asm":"dictnew","code":null,"alias":"b{0}","stack":"( - s)","desc":"pushes a Slice that represents a new empty dictionary"},{"asm":"b{\u3008binary-data\u3009}","code":null,"alias":null,"stack":"( - s)","desc":"creates a Slice s that contains no references and up to 1023 data bits specified in\u3008binary-data\u3009, which must be a string consisting only of the characters \u20180\u2019 and \u20181\u2019,"},{"asm":"DICTSET","code":"0xF412","alias":null,"stack":"(x k D n - D\u2032)","desc":"sets the value associated with n-bit key k(represented by a Slice as in DICTGET) in dictionary D(also represented by a Slice) to value x(again a Slice), and returns the resulting dictionary as D\u2032."},{"asm":"DICTISET","code":"0xF414","alias":null,"stack":"(x i D n - D\u2032)","desc":"similar to DICTSET, but with the key represented by a (big-endian) signed n-bit integer i. If i does not fit into n bits, a range check exception is generated"},{"asm":"DICTSETREF","code":"0xF413","alias":null,"stack":"(c k D n - D\u2032)","desc":"similar to DICTSET, but with the value set to a reference to Cell c"},{"asm":"DICTISETREF","code":"0xF413","alias":null,"stack":"(c i D n - D\u2032)","desc":"similar to DICTSETREF, but with the key a signed n-bit integer as in DICTISET"},{"asm":"LDDICT","code":"0xF404","alias":"LDOPTREF","stack":"(s - D s\u2032),","desc":"loads (parses) a dictionary D fromSlice s, and returns the remainder of s as s\u2032. May be applied to dictionaries or to values of arbitrary (\u02c6Y)? types"},{"asm":"STDICT","code":"0xF400","alias":"STOPTREF","stack":"(D b - b\u2032)","desc":"stores dictionary D into Builder b, returing the resulting Builder b\u2032"},{"asm":"u>B","code":null,"alias":"i>B","stack":"(x y - B)","desc":"stores an unsigned big-endian y-bit Integer x into a Bytes value B consisting of exactly y/8 bytes"},{"asm":"B>file","code":null,"alias":null,"stack":"(B S - )","desc":"creates a new (binary) file with the name specified in String S and writes data from Bytes B into the new file. If the specified file already exists, it is overwritten."}]')},27:function(e,a,t){e.exports=t(87)},32:function(e,a,t){},86:function(e,a,t){},87:function(e,a,t){"use strict";t.r(a);var s=t(0),i=t.n(s),n=t(10),c=t.n(n),l=(t(32),t(25)),o=t.n(l),r=t(8),d=t.n(r),u=(t(86),t(26)),m=[{dataField:"asm",text:"Asm / Instruction",sort:!0,filter:Object(r.textFilter)()},{dataField:"code",text:"Code",sort:!0,filter:Object(r.textFilter)()},{dataField:"alias",text:"Alias",sort:!0,filter:Object(r.textFilter)()},{dataField:"stack",text:"Stack"},{dataField:"desc",text:"Description"}];var h=function(){return i.a.createElement("div",{className:"App"},i.a.createElement("header",{className:"App-header"},i.a.createElement("h1",null,"FIFT Spreadsheet"),i.a.createElement("div",null,"Current page contains FIFT codes and instructions for ",i.a.createElement("a",{href:"https://test.ton.org/",target:"_blank"},"TON Blockchain")),i.a.createElement("div",null,"Based on ",i.a.createElement("a",{href:"https://test.ton.org/tvm.pdf#subsection.A.2",target:"_blank"},"TVM.pdf")," and ",i.a.createElement("a",{href:"https://test.ton.org/fiftbase.pdf#appendix.A",target:"_blank"},"FIFTbase.pdf")),i.a.createElement("div",{className:"alert alert-danger"},"In progress. Not all codes/instructions are covered")),i.a.createElement("div",{className:"spreadsheet"},i.a.createElement(o.a,{keyField:"asm",hover:!0,striped:!0,condensed:!0,data:u,filter:d()(),columns:m})))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(i.a.createElement(h,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[27,1,2]]]);
//# sourceMappingURL=main.36b3e464.chunk.js.map