(this["webpackJsonpton-fift-codes"]=this["webpackJsonpton-fift-codes"]||[]).push([[0],{26:function(e){e.exports=JSON.parse('[{"asm":"CTOS","code":null,"alias":null,"stack":null,"desc":"Cell to Slice"},{"asm":"DUP","code":null,"alias":"PUSH s0","stack":null,"desc":null},{"asm":"NIP","code":"0x31","alias":"POP s1","stack":null,"desc":null},{"asm":"INC","code":null,"alias":"ADDCONST 1","stack":null,"desc":null},{"asm":"INT","code":null,"alias":null,"stack":"(b x - b\')","desc":null},{"asm":"LDSLICEX","code":null,"alias":null,"stack":"(s l - s\u2032\u2032s\u2032)","desc":"loads the first 0 \u2264 l \u2264 1023 bits from Slices into a separate Slice s\u2032\u2032, returning the remainder of s a s`"},{"asm":"STU cc+1","code":"0xCB cc","alias":null,"stack":"(x b - b\u2032)","desc":"stores an unsigned cc+1-bit integer x into Builder b`"},{"asm":"LDU cc+1","code":"0xD3 cc","alias":null,"stack":"(s - x s\u2032)","desc":"loads an unsigned cc+1-bit integer x from Slices"},{"asm":"PLDU cc+1","code":"0xD70B cc","alias":null,"stack":"(s - x)","desc":"preloads an unsigned cc+1-bit integer froms"},{"asm":"SETCODE","code":"0xFB04","alias":null,"stack":"(c - )","desc":"creates an output action that would change this smart contract code to that given by Cell c"},{"asm":"boc+>B","code":null,"alias":null,"stack":"(c x - B)","desc":"creates and serializes a \u201cstandard\u201d bag of cells, containing one root Cell c along with all its descendants.  An Integer parameter 0\u2264x\u226431 is used to pass flags indicating the additional options for bag-of-cells serialization"},{"asm":"boc>B","code":null,"alias":"0 boc+>B","stack":"(c - B)","desc":"serializes a small \u201cstandard\u201d bag of cells with root Cell c and all its descendants"}]')},27:function(e,a,t){e.exports=t(87)},32:function(e,a,t){},86:function(e,a,t){},87:function(e,a,t){"use strict";t.r(a);var s=t(0),l=t.n(s),n=t(10),c=t.n(n),o=(t(32),t(25)),i=t.n(o),r=t(8),d=t.n(r),u=(t(86),t(26)),m=[{dataField:"asm",text:"Asm / Instruction",sort:!0,filter:Object(r.textFilter)()},{dataField:"code",text:"Code",sort:!0,filter:Object(r.textFilter)()},{dataField:"alias",text:"Alias",sort:!0,filter:Object(r.textFilter)()},{dataField:"stack",text:"Stack"},{dataField:"desc",text:"Description"}];var f=function(){return l.a.createElement("div",{className:"App"},l.a.createElement("header",{className:"App-header"},l.a.createElement("h1",null,"FIFT Spreadsheet"),l.a.createElement("div",null,"Current page contains FIFT codes and instructions for ",l.a.createElement("a",{href:"https://test.ton.org/",target:"_blank"},"TON Blockchain")),l.a.createElement("div",null,"Based on ",l.a.createElement("a",{href:"https://test.ton.org/tvm.pdf#subsection.A.2",target:"_blank"},"TVM.pdf")," and ",l.a.createElement("a",{href:"https://test.ton.org/fiftbase.pdf#appendix.A",target:"_blank"},"FIFTbase.pdf")),l.a.createElement("div",{className:"alert alert-danger"},"In progress. Not all codes/instructions are covered")),l.a.createElement("div",{className:"spreadsheet"},l.a.createElement(i.a,{keyField:"asm",hover:!0,striped:!0,condensed:!0,data:u,filter:d()(),columns:m})))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));c.a.render(l.a.createElement(f,null),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()}))}},[[27,1,2]]]);
//# sourceMappingURL=main.345b5cc5.chunk.js.map